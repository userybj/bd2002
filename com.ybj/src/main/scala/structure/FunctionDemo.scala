package structure

object FunctionDemo {
  def main(args: Array[String]): Unit = {
    //method与function区别
    /**
     * 方法 method
     * 在面向对象的编程语言中,我们将定义在类中,用来描述对象的行为的语法结构叫做方法
     */
    /**
     * 函数 function
     * 封装了一系列逻辑的一个有名字有参数的代码块
     */
    /**
     * 一般严格地说，scala中直接声明在class或者object中的函数，可以叫方法
     * 其他位置声明的函数就叫函数
     */
    //1.1 默认值参数
    def f1(age:Int = 100){}
    //调用时函数可以不传值,调用默认值
    f1()

    //1.2 带名参数的传参
    def f2(age1:Int=100,age2:Int=100){}
    /**
     * 多个默认值情况下会按照声明顺序赋值
     * 如果不想按照顺序，可以指定形参的名字
     */
    f2(age2 = 33)

    //1.3 可变长度参数
    def f3(age3:Int,age4:Int*){}
    //注意:参数列表中既有单个参数,又有可变长度参数,单个需要写在可变前
    f3(2,3,4)

    // 声明匿名函数
    /**
     * (参数1:类型1,参数2:类型2)=>{函数体}
     * (a: Int, b: Int) => a + b
     */

    //2.1 将匿名函数赋值给变量
    //声明变量f4 赋值  匿名函数
    val f4: (Int, Int) => Int = (a: Int, b: Int) => a + b
    f4(1,2)
    /**
     * 在scala中函数可以作为一种类型
     * 这个类型和其他的所有类具有同级别的使用权限
     * 也就是说可以将一个变量定义为一个函数类型，并且赋值给他这个函数类型的一个实例
     */

    //2.2 函数作为形参的类型
    def f5(a:Int,b:Int,c:(Int,Int) => Int)={
      c(a,b)
    }
    val res = f5(3,6,(x:Int,y:Int) => x+y)
    val res1 = f5(3,6,_ * _)
    println(res+"******"+res1)

    //2.3 单参数匿名函数的简化
    def f6(func:Int => Int ): Unit ={
    }
    f6((a:Int)=> a + 1)
    // 在传匿名函数作为参数时 可以省略参数类型不写
    // 并且参数个数为一时 可以省略参数列表的括号不写
    f6(a => a + 1)
    // 当参数只使用了一次时，可以使用 _代替
    f6(_ + 1)

    //2.4 两个参数匿名函数的简化
    f5(3,6,(x:Int,y:Int) => x + y)
    //如果两个参数的匿名函数
    //每个参数都只使用了一次，并且声明顺序和使用顺序一致
    //可以简化
    f5(3,6,_ + _)
  }
}
